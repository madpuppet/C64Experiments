[libraries]
Math;constant;PI
Math;constant;E
Math;function;abs;1
Math;function;acos;1
Math;function;asin;1
Math;function;atan;1
Math;function;atan2;2
Math;function;cbrt;1
Math;function;ceil;1
Math;function;cos;1
Math;function;cosh;1
Math;function;exp;1
Math;function;expm1;1
Math;function;floor;1
Math;function;hypot;2
Math;function;IEEEremainder;2
Math;function;log;1
Math;function;log10;1
Math;function;log1p;1
Math;function;max;2
Math;function;min;2
Math;function;pow;2
Math;function;random;0
Math;function;round;1
Math;function;signum;1
Math;function;sin;1
Math;function;sinh;1
Math;function;sqrt;1
Math;function;tan;1
Math;function;tanh;1
Math;function;toDegrees;1
Math;function;toRadians;1
Math;function;mod;2
Math;function;setSeed;1
Print;function;toIntString;1
Print;function;toIntString;2
Print;function;toHexString;1
Print;function;toHexString;2
Print;function;toBinaryString;1
Print;function;toBinaryString;2
Print;function;toOctalString;1
Print;function;toOctalString;2
Vector;function;Vector;0
Vector;function;Vector;3
Vector;function;Matrix;0
Vector;function;RotationMatrix;3
Vector;function;ScaleMatrix;3
Vector;function;MoveMatrix;3
Vector;function;PerspectiveMatrix;1
Constructors;constant;AT_ABSOLUTE
Constructors;constant;AT_ZEROPAGE
Constructors;constant;AT_ABSOLUTEX
Constructors;constant;AT_ABSOLUTEY
Constructors;constant;AT_IMMEDIATE
Constructors;constant;AT_INDIRECT
Constructors;constant;AT_IZEROPAGEX
Constructors;constant;AT_IZEROPAGEY
Constructors;constant;AT_NONE
Constructors;function;createFile;1
Constructors;function;List;0
Constructors;function;List;1
Constructors;function;Hashtable;0
Constructors;function;CmdArgument;2
Misc;constant;BLACK
Misc;constant;WHITE
Misc;constant;RED
Misc;constant;CYAN
Misc;constant;PURPLE
Misc;constant;GREEN
Misc;constant;BLUE
Misc;constant;YELLOW
Misc;constant;ORANGE
Misc;constant;BROWN
Misc;constant;LIGHT_RED
Misc;constant;DARK_GRAY
Misc;constant;DARK_GREY
Misc;constant;GRAY
Misc;constant;GREY
Misc;constant;LIGHT_GREEN
Misc;constant;LIGHT_BLUE
Misc;constant;LIGHT_GRAY
Misc;constant;LIGHT_GREY
Misc;constant;BF_C64FILE
Misc;constant;BF_KOALA
Misc;constant;BF_FLI
Misc;constant;BF_BITMAP_SINGLECOLOR
Misc;function;getFilename;0
Misc;function;getPath;0
Misc;function;getNamespace;0
Misc;function;LoadSid;1
Misc;function;LoadPicture;
Misc;function;LoadBinary;
65xxMnemonics;constant;ORA_IMM
65xxMnemonics;constant;ORA_ZP
65xxMnemonics;constant;ORA_ZPX
65xxMnemonics;constant;ORA_IZPX
65xxMnemonics;constant;ORA_IZPY
65xxMnemonics;constant;ORA_ABS
65xxMnemonics;constant;ORA_ABSX
65xxMnemonics;constant;ORA_ABSY
65xxMnemonics;constant;AND_IMM
65xxMnemonics;constant;AND_ZP
65xxMnemonics;constant;AND_ZPX
65xxMnemonics;constant;AND_IZPX
65xxMnemonics;constant;AND_IZPY
65xxMnemonics;constant;AND_ABS
65xxMnemonics;constant;AND_ABSX
65xxMnemonics;constant;AND_ABSY
65xxMnemonics;constant;EOR_IMM
65xxMnemonics;constant;EOR_ZP
65xxMnemonics;constant;EOR_ZPX
65xxMnemonics;constant;EOR_IZPX
65xxMnemonics;constant;EOR_IZPY
65xxMnemonics;constant;EOR_ABS
65xxMnemonics;constant;EOR_ABSX
65xxMnemonics;constant;EOR_ABSY
65xxMnemonics;constant;ADC_IMM
65xxMnemonics;constant;ADC_ZP
65xxMnemonics;constant;ADC_ZPX
65xxMnemonics;constant;ADC_IZPX
65xxMnemonics;constant;ADC_IZPY
65xxMnemonics;constant;ADC_ABS
65xxMnemonics;constant;ADC_ABSX
65xxMnemonics;constant;ADC_ABSY
65xxMnemonics;constant;SBC_IMM
65xxMnemonics;constant;SBC_ZP
65xxMnemonics;constant;SBC_ZPX
65xxMnemonics;constant;SBC_IZPX
65xxMnemonics;constant;SBC_IZPY
65xxMnemonics;constant;SBC_ABS
65xxMnemonics;constant;SBC_ABSX
65xxMnemonics;constant;SBC_ABSY
65xxMnemonics;constant;CMP_IMM
65xxMnemonics;constant;CMP_ZP
65xxMnemonics;constant;CMP_ZPX
65xxMnemonics;constant;CMP_IZPX
65xxMnemonics;constant;CMP_IZPY
65xxMnemonics;constant;CMP_ABS
65xxMnemonics;constant;CMP_ABSX
65xxMnemonics;constant;CMP_ABSY
65xxMnemonics;constant;CPX_IMM
65xxMnemonics;constant;CPX_ZP
65xxMnemonics;constant;CPX_ABS
65xxMnemonics;constant;CPY_IMM
65xxMnemonics;constant;CPY_ZP
65xxMnemonics;constant;CPY_ABS
65xxMnemonics;constant;DEC_ZP
65xxMnemonics;constant;DEC_ZPX
65xxMnemonics;constant;DEC_ABS
65xxMnemonics;constant;DEC_ABSX
65xxMnemonics;constant;DEX
65xxMnemonics;constant;DEY
65xxMnemonics;constant;INC_ZP
65xxMnemonics;constant;INC_ZPX
65xxMnemonics;constant;INC_ABS
65xxMnemonics;constant;INC_ABSX
65xxMnemonics;constant;INX
65xxMnemonics;constant;INY
65xxMnemonics;constant;ASL
65xxMnemonics;constant;ASL_ZP
65xxMnemonics;constant;ASL_ZPX
65xxMnemonics;constant;ASL_ABS
65xxMnemonics;constant;ASL_ABSX
65xxMnemonics;constant;ROL
65xxMnemonics;constant;ROL_ZP
65xxMnemonics;constant;ROL_ZPX
65xxMnemonics;constant;ROL_ABS
65xxMnemonics;constant;ROL_ABSX
65xxMnemonics;constant;LSR
65xxMnemonics;constant;LSR_ZP
65xxMnemonics;constant;LSR_ZPX
65xxMnemonics;constant;LSR_ABS
65xxMnemonics;constant;LSR_ABSX
65xxMnemonics;constant;ROR
65xxMnemonics;constant;ROR_ZP
65xxMnemonics;constant;ROR_ZPX
65xxMnemonics;constant;ROR_ABS
65xxMnemonics;constant;ROR_ABSX
65xxMnemonics;constant;LDA_IMM
65xxMnemonics;constant;LDA_ZP
65xxMnemonics;constant;LDA_ZPX
65xxMnemonics;constant;LDA_IZPX
65xxMnemonics;constant;LDA_IZPY
65xxMnemonics;constant;LDA_ABS
65xxMnemonics;constant;LDA_ABSX
65xxMnemonics;constant;LDA_ABSY
65xxMnemonics;constant;STA_ZP
65xxMnemonics;constant;STA_ZPX
65xxMnemonics;constant;STA_IZPX
65xxMnemonics;constant;STA_IZPY
65xxMnemonics;constant;STA_ABS
65xxMnemonics;constant;STA_ABSX
65xxMnemonics;constant;STA_ABSY
65xxMnemonics;constant;LDX_IMM
65xxMnemonics;constant;LDX_ZP
65xxMnemonics;constant;LDX_ZPY
65xxMnemonics;constant;LDX_ABS
65xxMnemonics;constant;LDX_ABSY
65xxMnemonics;constant;STX_ZP
65xxMnemonics;constant;STX_ZPY
65xxMnemonics;constant;STX_ABS
65xxMnemonics;constant;LDY_IMM
65xxMnemonics;constant;LDY_ZP
65xxMnemonics;constant;LDY_ZPX
65xxMnemonics;constant;LDY_ABS
65xxMnemonics;constant;LDY_ABSX
65xxMnemonics;constant;STY_ZP
65xxMnemonics;constant;STY_ZPX
65xxMnemonics;constant;STY_ABS
65xxMnemonics;constant;TAX
65xxMnemonics;constant;TXA
65xxMnemonics;constant;TAY
65xxMnemonics;constant;TYA
65xxMnemonics;constant;TSX
65xxMnemonics;constant;TXS
65xxMnemonics;constant;PLA
65xxMnemonics;constant;PHA
65xxMnemonics;constant;PLP
65xxMnemonics;constant;PHP
65xxMnemonics;constant;BPL_REL
65xxMnemonics;constant;BMI_REL
65xxMnemonics;constant;BVC_REL
65xxMnemonics;constant;BVS_REL
65xxMnemonics;constant;BCC_REL
65xxMnemonics;constant;BCS_REL
65xxMnemonics;constant;BNE_REL
65xxMnemonics;constant;BEQ_REL
65xxMnemonics;constant;BRK
65xxMnemonics;constant;RTI
65xxMnemonics;constant;JSR_ABS
65xxMnemonics;constant;RTS
65xxMnemonics;constant;JMP_ABS
65xxMnemonics;constant;JMP_IND
65xxMnemonics;constant;BIT_ZP
65xxMnemonics;constant;BIT_ABS
65xxMnemonics;constant;CLC
65xxMnemonics;constant;SEC
65xxMnemonics;constant;CLD
65xxMnemonics;constant;SED
65xxMnemonics;constant;CLI
65xxMnemonics;constant;SEI
65xxMnemonics;constant;CLV
65xxMnemonics;constant;NOP
65xxMnemonics;constant;NOP_IMM
65xxMnemonics;constant;NOP_ZP
65xxMnemonics;constant;NOP_ZPX
65xxMnemonics;constant;NOP_ABS
65xxMnemonics;constant;NOP_ABSX
65xxMnemonics;constant;SLO_ZP
65xxMnemonics;constant;SLO_ZPX
65xxMnemonics;constant;SLO_IZPX
65xxMnemonics;constant;SLO_IZPY
65xxMnemonics;constant;SLO_ABS
65xxMnemonics;constant;SLO_ABSX
65xxMnemonics;constant;SLO_ABSY
65xxMnemonics;constant;RLA_ZP
65xxMnemonics;constant;RLA_ZPX
65xxMnemonics;constant;RLA_IZPX
65xxMnemonics;constant;RLA_IZPY
65xxMnemonics;constant;RLA_ABS
65xxMnemonics;constant;RLA_ABSX
65xxMnemonics;constant;RLA_ABSY
65xxMnemonics;constant;SRE_ZP
65xxMnemonics;constant;SRE_ZPX
65xxMnemonics;constant;SRE_IZPX
65xxMnemonics;constant;SRE_IZPY
65xxMnemonics;constant;SRE_ABS
65xxMnemonics;constant;SRE_ABSX
65xxMnemonics;constant;SRE_ABSY
65xxMnemonics;constant;RRA_ZP
65xxMnemonics;constant;RRA_ZPX
65xxMnemonics;constant;RRA_IZPX
65xxMnemonics;constant;RRA_IZPY
65xxMnemonics;constant;RRA_ABS
65xxMnemonics;constant;RRA_ABSX
65xxMnemonics;constant;RRA_ABSY
65xxMnemonics;constant;SAX_ZP
65xxMnemonics;constant;SAX_ZPY
65xxMnemonics;constant;SAX_IZPX
65xxMnemonics;constant;SAX_ABS
65xxMnemonics;constant;LAX_IMM
65xxMnemonics;constant;LAX_ZP
65xxMnemonics;constant;LAX_ZPY
65xxMnemonics;constant;LAX_IZPX
65xxMnemonics;constant;LAX_IZPY
65xxMnemonics;constant;LAX_ABS
65xxMnemonics;constant;LAX_ABSY
65xxMnemonics;constant;DCP_ZP
65xxMnemonics;constant;DCP_ZPX
65xxMnemonics;constant;DCP_IZPX
65xxMnemonics;constant;DCP_IZPY
65xxMnemonics;constant;DCP_ABS
65xxMnemonics;constant;DCP_ABSX
65xxMnemonics;constant;DCP_ABSY
65xxMnemonics;constant;ISC_ZP
65xxMnemonics;constant;ISC_ZPX
65xxMnemonics;constant;ISC_IZPX
65xxMnemonics;constant;ISC_IZPY
65xxMnemonics;constant;ISC_ABS
65xxMnemonics;constant;ISC_ABSX
65xxMnemonics;constant;ISC_ABSY
65xxMnemonics;constant;ANC_IMM
65xxMnemonics;constant;ANC2_IMM
65xxMnemonics;constant;ALR_IMM
65xxMnemonics;constant;ARR_IMM
65xxMnemonics;constant;XAA_IMM
65xxMnemonics;constant;AXS_IMM
65xxMnemonics;constant;SBC2_IMM
65xxMnemonics;constant;AHX_IZPY
65xxMnemonics;constant;AHX_ABSY
65xxMnemonics;constant;SHY_ABSX
65xxMnemonics;constant;SHX_ABSY
65xxMnemonics;constant;TAS_ABSY
65xxMnemonics;constant;LAS_ABSY
65xxMnemonics;constant;SAC_IMM
65xxMnemonics;constant;SIR_IMM
65xxMnemonics;constant;BRA_REL
65xxMnemonics;function;asmCommandSize;1
[directives]
*;*=$1000;Sets the memory position to a given value.
.align;.align $100;Aligns the memory position with the given value. Ex. '.align $100' at memory position $1234 will set the position to $1300.
.assert;.assert "Test 1",2+2,4;Asserts that two expressions or codeblocks are equal.
.asserterror;.asserterror "Test 2", List().get(27);Asserts that a given expression or codeblock generates an error.
.break;.break;Puts a breakpoint on the next generated bytes.
.by;.by $01,$02,$03;An alias for '.byte'.
.byte;.byte $01,$02,$03;Outputs bytes.
.const;.const DELAY=7;Defines a constant.
.define;.define width, height {...};Executes a block of directives in 'functionmode' (faster) to define values.
.disk;.disk [..disk pararamters..] {..fileparameters..};Creates a d64 image file.
.dw;.dw $12341234;An alias for '.dword'.
.dword;.dword $12341234;Outputs doublewords (4 byte values).
.encoding;.encoding "screencode_upper";Sets the character encoding.
.enum;.enum {on, off};Defines a series of constants.
.error;.error "not good!";Creates an user raised error.
.errorif;.errorif x>10 "not good!";Creates an user raised error if condition is evaluated to true.
.eval;.eval x=x+y/2;Evaluates a script expression.
.file;.file [name="myfile.prg" segments="Code, Data"];Creates a prg or bin file from the given segments.
.filemodify;.filemodify Encrypt(33);Modify the output of the current source file with the given modifier.
.filenamespace;.filenamespace myspace;Creates a namespace for all the following directives in the current source file.
.fill;.fill 10, i*2;Fills a number of bytes with the value of a given expression.
.for;.for(var i;i<10;i++) {...};Creates a for loop.
.function;.function area(h,w) {..};Defines a function.
.if;.if(x>10) {...};Executes code if the given condition is true.
.import binary;.import binary "Music.bin";Imports a binary file.
.import c64;.import c64 "Music.c64";Imports a c64 files. Same as '.import binary', but ignores the two address bytes at the start of the file.
.import source;.import source "MyLib.asm";Imports another source file. (Depricated, use #import instead)
.import text;.import text "scroll.txt";Imports a text file.
.importonce;.importonce;Make the assembler skip the current file if it has already been imported. (Depricated, use #importonce instead)
.label;.label color=$d020;Assigns a given expression to a label.
.macro;.macro BasicUpstart() {...};Defines a macro.
.memblock;.memblock "New block";Defines a new memoryblock at the current memoryposition.
.modify;.modify Encrypt(27) {...};Modifies the output of a codeblock using the given modifier.
.namespace;.namespace myspace {..};Creates a local namespace.
.pc;.pc=$1000;Same as '*='
.plugin;.plugin "plugins.macros.MyMacro";Tells the assembler to look for a plugin at the given java-package path.
.print;.print "Hello";Prints a message to the console in the last pass.
.printnow;.printnow "Hello now";Prints a message to the console immediately.
.pseudocommand;.pseudocommand mov src:tar {...};Defines a pseudocommand.
.pseudopc;.pseudopc $2000 {...};Sets the program counter to something else than the actual memory position.
.return;.return 27;Used inside functions to return a value.
.segment;.segment Data "My Data";Switches to another segment.
.segmentdef;.segmentdef Data [start=$1000];Defines a segment.
.segmentout;.segmentout [segments="DRIVE_CODE"];Output the bytes of an intermediate segment to the current memoryblock.
.struct;.struct Point {x,y};Creates a user defined structure.
.te;.te "hello";An alias for '.text'.
.text;.text "hello";Dumps text bytes to memory.
.var;.var x=27;Defines a variable.
.while;.while(i<10) {...};Creates a while loop.
.wo;.wo $1000,$1012;An alias for '.word'.
.word;.word $1000,$1012;Outputs words (two bytes values),
.zp;.zp { label: .byte 0 ... };Marks unresolved labels as being in the zeropage.
[ppdirectives]
#define;#define DEBUG;Defines a preprocessor symbol.
#elif;#elif TEST;The combination of an #else and an #if preprocessor directive.
#else;#else;Used after an #if to start an else block which is executed if the condition is false.
#endif;#endif;Marks the end of an #if/#else block.
#if;#if !DEBUG;Discards the sourcecode after the #if-directive if the condition is false.
#import;#import "file2.asm";Imports another sourcefile.
#importif;#importif !DEBUG "file2.asm";Imports another sourcefile if the given expression is evaluated to true.
#importonce;#importonce;Make the assembler skip the current file if it has already been imported.
#undef;#undef DEBUG;Removes the definition of a preprocessor symbol.
[errors]
[syntax]
symbolReference;1,16,1,20,0
directive;3,1,3,6,0
directive;4,1,4,6,0
label;8,1,8,6,0
comment;11,5,11,63,0
mnemonic;9,2,9,4,0
mnemonic;12,5,12,7,0
mnemonic;13,5,13,7,0
mnemonic;14,5,14,7,0
mnemonic;15,5,15,7,0
comment;18,5,18,47,0
mnemonic;16,5,16,7,0
mnemonic;19,5,19,7,0
mnemonic;20,5,20,7,0
symbolReference;21,9,21,16,0
operator;21,17,21,17,0
mnemonic;21,5,21,7,0
symbolReference;22,9,22,13,0
mnemonic;22,5,22,7,0
mnemonic;23,5,23,7,0
label;24,1,24,6,0
comment;25,19,25,77,0
mnemonic;25,5,25,7,0
mnemonic;26,5,26,7,0
symbolReference;27,9,27,13,0
mnemonic;27,5,27,7,0
symbolReference;28,9,28,13,0
mnemonic;28,5,28,7,0
symbolReference;30,9,30,13,0
operator;30,14,30,14,0
mnemonic;30,5,30,7,0
mnemonic;31,5,31,7,0
mnemonic;32,5,32,7,0
symbolReference;33,9,33,13,0
operator;33,14,33,14,0
mnemonic;33,5,33,7,0
mnemonic;34,5,34,7,0
symbolReference;35,9,35,13,0
operator;35,14,35,14,0
mnemonic;35,5,35,7,0
symbolReference;36,9,36,16,0
operator;36,17,36,17,0
mnemonic;36,5,36,7,0
symbolReference;37,9,37,13,0
mnemonic;37,5,37,7,0
mnemonic;38,5,38,7,0
comment;41,5,41,30,0
comment;42,5,42,39,0
symbolReference;39,9,39,13,0
mnemonic;39,5,39,7,0
label;43,1,43,12,0
mnemonic;44,5,44,7,0
symbolReference;45,9,45,14,0
mnemonic;45,5,45,7,0
symbolReference;46,9,46,13,0
mnemonic;46,5,46,7,0
mnemonic;47,5,47,7,0
symbolReference;48,9,48,14,0
operator;48,15,48,15,0
mnemonic;48,5,48,7,0
mnemonic;49,5,49,7,0
symbolReference;50,9,50,13,0
operator;50,14,50,14,0
mnemonic;50,5,50,7,0
label;52,1,52,8,0
mnemonic;53,5,53,7,0
symbolReference;54,10,54,14,0
mnemonic;54,5,54,7,0
mnemonic;55,5,55,7,0
mnemonic;56,5,56,7,0
mnemonic;57,5,57,7,0
symbolReference;58,9,58,13,0
mnemonic;58,5,58,7,0
mnemonic;59,5,59,7,0
symbolReference;60,9,60,13,0
operator;60,14,60,14,0
mnemonic;60,5,60,7,0
mnemonic;61,5,61,7,0
mnemonic;62,5,62,7,0
mnemonic;63,5,63,7,0
mnemonic;64,5,64,7,0
symbolReference;65,9,65,16,0
mnemonic;65,5,65,7,0
symbolReference;66,9,66,14,0
operator;66,15,66,15,0
mnemonic;66,5,66,7,0
symbolReference;67,9,67,16,0
operator;67,17,67,17,0
mnemonic;67,5,67,7,0
symbolReference;68,9,68,14,0
operator;68,15,68,15,0
mnemonic;68,5,68,7,0
symbolReference;69,11,69,17,0
operator;69,10,69,10,0
mnemonic;69,5,69,7,0
mnemonic;70,5,70,7,0
symbolReference;71,11,71,17,0
operator;71,10,71,10,0
mnemonic;71,5,71,7,0
mnemonic;72,5,72,7,0
mnemonic;73,5,73,7,0
mnemonic;74,5,74,7,0
mnemonic;75,5,75,7,0
mnemonic;76,5,76,7,0
mnemonic;77,5,77,7,0
mnemonic;78,5,78,7,0
label;80,1,80,7,0
mnemonic;81,5,81,7,0
comment;83,23,83,66,0
label;83,1,83,9,0
directive;84,5,84,9,0
comment;87,1,87,19,0
label;86,1,86,7,0
mnemonic;88,5,88,7,0
mnemonic;89,5,89,7,0
symbolReference;90,9,90,19,0
mnemonic;90,5,90,7,0
label;92,1,92,8,0
symbolReference;93,9,93,16,0
mnemonic;93,5,93,7,0
mnemonic;94,5,94,7,0
mnemonic;96,5,96,7,0
symbolReference;97,9,97,14,0
mnemonic;97,5,97,7,0
mnemonic;98,5,98,7,0
symbolReference;99,9,99,14,0
operator;99,15,99,15,0
mnemonic;99,5,99,7,0
mnemonic;100,5,100,7,0
label;102,1,102,11,0
symbolReference;103,9,103,16,0
mnemonic;103,5,103,7,0
mnemonic;104,5,104,7,0
mnemonic;106,9,106,11,0
mnemonic;107,5,107,7,0
label;108,1,108,12,0
symbolReference;109,9,109,13,0
mnemonic;109,5,109,7,0
symbolReference;110,9,110,14,0
mnemonic;110,5,110,7,0
mnemonic;111,5,111,7,0
symbolReference;112,9,112,19,0
mnemonic;112,5,112,7,0
mnemonic;113,5,113,7,0
mnemonic;114,5,114,7,0
symbolReference;115,9,115,13,0
mnemonic;115,5,115,7,0
mnemonic;116,5,116,7,0
symbolReference;117,9,117,13,0
operator;117,14,117,14,0
mnemonic;117,5,117,7,0
mnemonic;118,5,118,7,0
mnemonic;119,5,119,7,0
symbolReference;120,9,120,14,0
mnemonic;120,5,120,7,0
mnemonic;121,5,121,7,0
symbolReference;122,9,122,14,0
operator;122,15,122,15,0
mnemonic;122,5,122,7,0
mnemonic;123,5,123,7,0
label;125,1,125,10,0
symbolReference;126,9,126,16,0
mnemonic;126,5,126,7,0
mnemonic;127,5,127,7,0
symbolReference;128,9,128,13,0
mnemonic;128,5,128,7,0
label;129,1,129,11,0
symbolReference;130,9,130,14,0
mnemonic;130,5,130,7,0
mnemonic;131,5,131,7,0
symbolReference;132,9,132,18,0
mnemonic;132,5,132,7,0
mnemonic;133,5,133,7,0
mnemonic;134,5,134,7,0
symbolReference;135,9,135,13,0
mnemonic;135,5,135,7,0
mnemonic;136,5,136,7,0
symbolReference;137,9,137,13,0
operator;137,14,137,14,0
mnemonic;137,5,137,7,0
mnemonic;138,5,138,7,0
mnemonic;139,5,139,7,0
symbolReference;140,9,140,14,0
mnemonic;140,5,140,7,0
mnemonic;141,5,141,7,0
symbolReference;142,9,142,14,0
operator;142,15,142,15,0
mnemonic;142,5,142,7,0
mnemonic;143,5,143,7,0
label;145,1,145,9,0
mnemonic;146,5,146,7,0
mnemonic;147,5,147,7,0
label;150,1,150,9,0
directive;151,5,151,9,0
symbolReference;151,11,151,16,0
symbolReference;151,19,151,25,0
symbolReference;151,28,151,37,0
symbolReference;151,40,151,48,0
directive;155,1,155,7,0
directive;159,1,159,7,0
comment;1,1,24,2,1
comment;26,1,26,34,1
comment;27,1,27,10,1
comment;28,1,28,34,1
comment;30,1,36,62,1
directive;37,1,37,6,1
comment;38,20,38,35,1
comment;39,16,39,27,1
comment;40,16,40,22,1
comment;44,14,44,58,1
comment;47,1,53,62,1
directive;38,2,38,6,1
symbolReference;38,8,38,17,1
directive;39,5,39,9,1
directive;40,5,40,9,1
directive;41,2,41,6,1
symbolReference;41,20,41,26,1
functionCall;41,8,41,18,1
directive;42,2,42,6,1
label;43,1,43,11,1
directive;44,5,44,9,1
directive;54,1,54,6,1
comment;56,20,56,35,1
comment;57,16,57,27,1
comment;58,16,58,22,1
comment;62,14,62,58,1
directive;56,2,56,6,1
symbolReference;56,8,56,17,1
directive;57,5,57,9,1
directive;58,5,58,9,1
directive;59,2,59,6,1
symbolReference;59,20,59,26,1
functionCall;59,8,59,18,1
directive;60,2,60,6,1
label;61,1,61,11,1
directive;62,5,62,9,1
[files]
0;C:\Users\podes\Documents\Projects\Demos\VideoPlayer\VideoPlayer.asm
1;KickAss.jar:/include/autoinclude.asm
